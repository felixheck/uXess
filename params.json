{"name":"Uxess","tagline":"Generic authorization module for role-based handling of ui elements","body":"# uXess\r\n### Generic authorization module for role-based handling of ui elements\r\n---\r\n\r\n1. [Introduction](#introduction)\r\n1. [Installation](#installation)\r\n1. [Usage](#usage)\r\n1. [Minimal Working Example](#minimal-working-example)\r\n1. [Development](#development)\r\n1. [Contribution](#contribution)\r\n1. [Changelog](#changelog)\r\n1. [License](#license)\r\n\r\n## Introduction\r\nThe only dependencies are [AngularJS](https://github.com/angular/angular.js/) and the animation module **ngAnimate**.\r\n\r\nTested against v1.4.7 but other versions should work.\r\n\r\n## Installation\r\nFor installation use the [Node Package Manager](https://github.com/npm/npm):\r\n```\r\n$ npm install --save uxess\r\n```\r\n\r\nor clone the repository:\r\n```\r\n$ git clone https://github.com/felixheck/uXess\r\n```\r\n\r\n## Usage\r\n### Integration\r\nInclude **uXess** and **ngAnimate** into your application:\r\n``` html\r\n<!DOCTYPE html>\r\n<html ng-app=\"yourApp\">\r\n<head>\r\n\t...\r\n</head>\r\n<body>\r\n\t...\r\n\r\n\t<script src=\"../uxess.min.js\"></script>\r\n\t<script src=\"../angular-animate.min.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\nDeclare a dependency on the **uXess** module:\r\n``` js\r\nangular.module('yourApp', [\r\n\t'uxs'\r\n]);\r\n```\r\n\r\n### Set a new wildcard symbol\r\nIn the `config` block:\r\n``` js\r\nangular.module('sampleApp')\r\n\t.config(function(uxsWildcardHandlerProvider) {\r\n\t\tuxsWildcardHandlerProvider.setWildcard('?');\r\n\t});\r\n```\r\n\r\nAfter initialisation, for example in a controller:\r\n``` js\r\nangular.module('yourApp').controller('FooCtrl', function(uxsWildcardHandler) {\r\n\tthis.init = function() {\r\n\t\tuxsWildcardHandler.setWildcard('?');\r\n\t};\r\n});\r\n```\r\n\r\n### Set default authorization type\r\nIn the `config` block:\r\n``` js\r\nangular.module('sampleApp')\r\n\t.config(function(uxsAuthTypeHandlerProvider) {\r\n\t\tuxsAuthTypeHandlerProvider.setDefaultAuthType('all');\r\n\t});\r\n```\r\n\r\nAfter initialisation, for example in a controller:\r\n``` js\r\nangular.module('yourApp').controller('FooCtrl', function(uxsAuthTypeHandler) {\r\n\tthis.init = function() {\r\n\t\tuxsAuthTypeHandler.setDefaultAuthType('all');\r\n\t};\r\n});\r\n```\r\n\r\n### Set permits\r\nBefore AngularJS bootstrapping:\r\n``` js\r\nangular.element(document).ready(function() {\r\n\t$.get('api/v1/user', function(res) {\r\n\t\tangular.module('yourApp').config(function(uxsPermitHandlerProvider) {\r\n\t\t\tuxsPermitHandlerProvider.setPermits(res.permits);\r\n\t\t});\r\n\r\n\t\tangular.bootstrap(document, ['yourApp']);\r\n  });\r\n});\r\n\r\n```\r\n\r\nIn the `run` block:\r\n``` js\r\nangular.module('yourApp')\r\n\t.run(function($http, uxsPermitHandler) {\r\n\t\t$http.get('/api/v1/user').then(function(res) {\r\n\t    uxsPermitHandler.setPermits(res.permits);\r\n\t  });\r\n\t});\r\n```\r\n\r\nAfter initialisation, for example in a controller:\r\n``` js\r\nangular.module('yourApp').controller('FooCtrl', function(uxsPermitHandler) {\r\n\tthis.init = function() {\r\n\t\tuxsPermitHandler.setPermits('admin');\r\n\t};\r\n});\r\n```\r\n\r\n### Directives\r\nMake use of static permit and the default authorization type:\r\n``` html\r\n<button uxs-if=\"admin\"></button>\r\n```\r\n\r\nMake use of static permits and the **none** authorization type:\r\n``` html\r\n<button uxs-if=\"admin, user\" uxs-type=\"none\"></button>\r\n```\r\n\r\nMake use of the scope and the **all** authorization type:\r\n``` html\r\n<button uxs-if=\"FooCtrl.permits\" uxs-type=\"all\"></button>\r\n```\r\n\r\nMake use of an expression and the **any** authorization type:\r\n``` html\r\n<button uxs-if=\"{{ FooCtrl.permits }}\" uxs-type=\"any\"></button>\r\n```\r\n\r\nMake use of the wildcard symbol, to check if user has any role:\r\n``` html\r\n<button uxs-if=\"*\"></button>\r\n```\r\n##Public API\r\n### uxsAccessHandler\r\n#### uxsAccessHandler.isPermitted\r\n``` js\r\n/**\r\n * @description\r\n * Check if UI element is accessible for user\r\n *\r\n * @param {(Array.<?string> | string)} permits Permits to be searched for\r\n * @param {string} authType Required auth type\r\n * @returns {boolean} UI element is accessible\r\n */\r\n```\r\n\r\n#### uxsAccessHandler.hasPermits\r\n``` js\r\n/**\r\n * @description\r\n * Check if any permits are included in `data.permits`of `uxsPermitHandler`\r\n *\r\n * @returns {boolean} Any permit is set\r\n */\r\n```\r\n\r\n#### uxsAccessHandler.hasAllPermits\r\n``` js\r\n/**\r\n * @description\r\n * Check if all passed permits are included in `data.permits` of `uxsPermitHandler`\r\n *\r\n * @param {(Array.<?string> | string)} permits Permits to be searched for\r\n * @returns {boolean} All passed permits are set\r\n */\r\n```\r\n\r\n#### uxsAccessHandler.hasAnyPermits\r\n``` js\r\n/**\r\n * @description\r\n * Check if any of passed permits is included in `data.permits` of `uxsPermitHandler`\r\n *\r\n * @param {(Array.<?string> | string)} permits Permits to be searched for\r\n * @returns {boolean} Any of passed permits is set\r\n */\r\n```\r\n\r\n#### uxsAccessHandler.hasNonePermits\r\n``` js\r\n/**\r\n * @description\r\n * Check if none of passed permits is included in `data.permits` of `uxsPermitHandler`\r\n *\r\n * @param {(Array.<?string> | string)} permits Permits to be searched for\r\n * @returns {boolean} None of passed permits is set\r\n */\r\n```\r\n\r\n### uxsAuthTypeHandler\r\n#### uxsAuthTypeHandler.setDefaultAuthType\r\n``` js\r\n/**\r\n * @description\r\n * Set `_data.defaultAuthType`\r\n *\r\n * @param {string} authType Auth type to be set\r\n */\r\n```\r\n\r\n#### uxsAuthTypeHandler.getDefaultAuthType\r\n``` js\r\n/**\r\n * @description\r\n * Set `_data.defaultAuthType`\r\n *\r\n * @returns {string} `_data.defaultAuthType`\r\n */\r\n```\r\n\r\n#### uxsAuthTypeHandler.isAuthType\r\n``` js\r\n/**\r\n * @description\r\n * Check if passed auth type is valid\r\n *\r\n * @param {string} authType Auth type to be checked\r\n * @returns {boolean} Auth type is valid\r\n */\r\n```\r\n\r\n#### uxsAuthTypeHandler.parseAuthType\r\n``` js\r\n/**\r\n * @description\r\n * Parse passed auth type\r\n *\r\n * @param {string} authType Auth type to be parsed\r\n * @returns {string} Parsed auth type\r\n */\r\n```\r\n\r\n### uxsPermitHandler\r\n#### uxsPermitHandler.setPermits\r\n``` js\r\n/**\r\n * @description\r\n * Set `_data.permits`\r\n *\r\n * @fires `uxsPermitsChanged`\r\n *\r\n * @param {(Array.<?string> | string)} permits Permits to be set\r\n */\r\n```\r\n\r\n#### uxsPermitHandler.getPermits\r\n``` js\r\n/**\r\n * @description\r\n * Get `_data.permits`\r\n *\r\n * @returns {Array.<?string>} `_data.permits`\r\n */\r\n```\r\n\r\n#### uxsPermitHandler.parsePermits\r\n``` js\r\n/**\r\n * @description\r\n * Parse permits to list of trimmed and transformed ones\r\n *\r\n * @param {(Array.<?string> | string)} permits Permits to be parsed\r\n * @returns {Array.<?string>} List of permits\r\n */\r\n```\r\n\r\n### uxsWildcardHandler\r\n#### uxsWildcardHandler.setWildcard\r\n``` js\r\n/**\r\n * @description\r\n * Set `_data.wildcard`\r\n *\r\n * @param {string} wildcard Wildcard to be set\r\n */\r\n```\r\n\r\n#### uxsWildcardHandler.getWildcard\r\n``` js\r\n/**\r\n * @description\r\n * Get `_data.wildcard`\r\n *\r\n * @returns {Array.<?string>} `_data.permits`\r\n */\r\n```\r\n\r\n#### uxsWildcardHandler.parseWildcard\r\n``` js\r\n/**\r\n * @description\r\n * Parse wildcard to string\r\n *\r\n * @param {string} wildcard Wildcard to be parsed\r\n * @returns {string} Parsed wildcard\r\n */\r\n```\r\n\r\n\r\n## Minimal Working Example\r\nTo run a demo or rather a minimal working example, use:\r\n```\r\n$ npm install\r\n$ npm run sample\r\n```\r\n\r\nIt is possible to set the permits by checking the checkboxes.\r\n\r\n## Development\r\nFirst you have to install all dependencies:\r\n```\r\n$ npm install\r\n```\r\n\r\n### Testing\r\nTo execute all unit tests, use:\r\n```\r\n$ npm test\r\n```\r\n\r\nTo execute end-to-end tests, use:\r\n```\r\n$ npm run http\r\n$ npm run selenium\r\n$ npm run test:e2e\r\n```\r\n\r\nTo open the coverage information of the unit tests, use:\r\n```\r\n$ npm run coverage\r\n```\r\n\r\n### Distributing\r\nTo build the distributional files, use:\r\n```\r\n$ npm run build\r\n```\r\n\r\nor make use of the file watcher:\r\n```\r\n$ npm start\r\n```\r\n\r\n## Contribution\r\nFork this repository and push in your ideas.\r\n\r\nDo not forget to add corresponding tests.\r\n\r\n## Changelog\r\n\r\n## License\r\nThe MIT License\r\n\r\nCopyright (c) 2016 Felix Heck\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}