(function(){"use strict";angular.module("uxs",[])})(),function(){"use strict";function AccessHandler(uxsAUTH_TYPES,uxsAuthTypeHandler,uxsPermitHandler){function inspectPermits(element){return uxsPermitHandler.getPermits().indexOf(element)!==-1}this.hasPermits=function hasPermits(permits){var parsedPermits=this.parsePermits(permits);return parsedPermits.every(inspectPermits)},this.hasAnyPermits=function hasAnyPermits(permits){var parsedPermits=this.parsePermits(permits);return parsedPermits.some(inspectPermits)},this.hasNonePermits=function hasNonePermits(permits){return!this.hasAnyPermits(permits)},this.isPermitted=function isPermitted(permits,authType){var isVerified=uxsAuthTypeHandler.isAuthType(authType),parsedAuthType=uxsAuthTypeHandler.parseAuthType(authType),permitInspector=uxsAUTH_TYPES[parsedAuthType];return isVerified&&this[permitInspector](permits)}}angular.module("uxs").service("uxsAccessHandler",["uxsAUTH_TYPES","uxsAuthTypeHandler","uxsPermitHandler",AccessHandler])}(),function(){"use strict";function AuthTypeHandler(uxsAUTH_TYPES){var data={defaultAuthType:"any"};this.setDefaultAuthType=function setDefaultAuthType(authType){var isVerified=this.isAuthType(authType),parsedAuthType;isVerified&&(parsedAuthType=this.parseAuthType(authType),data.defaultAuthType=parsedAuthType)},this.getDefaultAuthType=function getDefaultAuthType(){return data.defaultAuthType},this.isAuthType=function isAuthType(authType){var parsedAuthType=this.parseAuthType(authType),authTypeKeys=Object.keys(uxsAUTH_TYPES);return authTypeKeys.indexOf(parsedAuthType)!==-1},this.parseAuthType=function parseAuthType(authType){var parsedAuthType=data.defaultAuthType;return angular.isString(authType)&&(parsedAuthType=angular.lowercase(authType).trim()),parsedAuthType}}angular.module("uxs").service("uxsAuthTypeHandler",["uxsAUTH_TYPES",AuthTypeHandler])}(),function(){"use strict";angular.module("uxs").constant("uxsAUTH_TYPES",{any:"hasAnyPermits",all:"hasPermits",none:"hasNonePermits"})}(),function(){"use strict";function PermitHandler($rootScope){function parsePermitList(permits){return permits.map(function(permit){return angular.lowercase(permit).trim()||""})}var data={permits:[]};this.parsePermits=function parsePermits(permits){var parsedPermits=[];return permits&&angular.isString(permits)&&(permits=permits.split(",")),permits&&angular.isArray(permits)&&(parsedPermits=parsePermitList(permits)),parsedPermits},this.getPermits=function getPermits(){return data.permits},this.setPermits=function setPermits(permits){data.permits=this.parsePermits(permits),$rootScope.$broadcast("uxsPermitsChanged")}}angular.module("uxs").service("uxsPermitHandler",["$rootScope",PermitHandler])}(),function(){"use strict";function uxsIf($animate,PermitHandler){function link(scope,element,attrs,ctrl,transclude){var isAccessible=PermitHandler.isPermitted(attrs.uxsIf,attrs.uxsType);isAccessible?$animate.enter():$animate.leave(),angular.noop(),scope.$on("uxsPermitsChanged",angular.noop)}return{multiElement:!0,transclude:"element",priority:800,terminal:!0,restrict:"A",link:link}}angular.module("uxess").directive("uxsIf",["$animate","PermitHandler",uxsIf])}()