(function(){"use strict";angular.module("uxs",[])})(),function(){"use strict";function UxsAccessHandler(uxsAUTH_TYPES,uxsAuthTypeHandler,uxsPermitHandler){function _inspectPermits(element){return uxsPermitHandler.getPermits().indexOf(element)!==-1}this.hasPermits=function hasPermits(permits){var parsedPermits=uxsPermitHandler.parsePermits(permits);return parsedPermits.every(_inspectPermits)},this.hasAnyPermits=function hasAnyPermits(permits){var parsedPermits=uxsPermitHandler.parsePermits(permits);return parsedPermits.some(_inspectPermits)},this.hasNonePermits=function hasNonePermits(permits){return!this.hasAnyPermits(permits)},this.isPermitted=function isPermitted(permits,authType){var isVerified=uxsAuthTypeHandler.isAuthType(authType),parsedAuthType=uxsAuthTypeHandler.parseAuthType(authType),permitInspector=uxsAUTH_TYPES[parsedAuthType];return isVerified&&this[permitInspector](permits)}}angular.module("uxs").service("uxsAccessHandler",["uxsAUTH_TYPES","uxsAuthTypeHandler","uxsPermitHandler",UxsAccessHandler])}(),function(){"use strict";function UxsAuthTypeHandler(){var _providedDefaultAuthType;this.setDefaultAuthType=function setDefaultAuthType(authType){_providedDefaultAuthType=authType},this.$get=function(uxsAUTH_TYPES){function _parseProvidedDefaultAuthType(){_providedDefaultAuthType&&service.setDefaultAuthType(_providedDefaultAuthType)}var service={},_data={defaultAuthType:"any"};return service.setDefaultAuthType=function setDefaultAuthType(authType){var isVerified=this.isAuthType(authType),parsedAuthType;isVerified&&(parsedAuthType=this.parseAuthType(authType),_data.defaultAuthType=parsedAuthType)},service.getDefaultAuthType=function getDefaultAuthType(){return _data.defaultAuthType},service.isAuthType=function isAuthType(authType){var parsedAuthType=this.parseAuthType(authType),authTypeKeys=Object.keys(uxsAUTH_TYPES);return authTypeKeys.indexOf(parsedAuthType)!==-1},service.parseAuthType=function parseAuthType(authType){var parsedAuthType=_data.defaultAuthType;return angular.isString(authType)&&(parsedAuthType=angular.lowercase(authType).trim()),parsedAuthType},_parseProvidedDefaultAuthType(),service}}angular.module("uxs").provider("uxsAuthTypeHandler",[UxsAuthTypeHandler])}(),function(){"use strict";angular.module("uxs").constant("uxsAUTH_TYPES",{any:"hasAnyPermits",all:"hasPermits",none:"hasNonePermits"})}(),function(){"use strict";function UxsPermitHandler(){var _providedPermits;this.setPermits=function setPermits(permits){_providedPermits=permits},this.$get=function($rootScope){function _parsePermitList(permits){return permits.map(function(permit){try{permit=permit.toString(),permit=angular.lowercase(permit).trim()}catch(error){permit=""}return permit})}function _parseProvidedPermits(){_providedPermits&&service.setPermits(_providedPermits)}var service={},_data={permits:[]};return service.parsePermits=function parsePermits(permits){var parsedPermits=[];return permits&&angular.isString(permits)&&(permits=permits.split(",")),permits&&angular.isArray(permits)&&(parsedPermits=_parsePermitList(permits)),parsedPermits},service.getPermits=function getPermits(){return _data.permits},service.setPermits=function setPermits(permits){_data.permits=this.parsePermits(permits),$rootScope.$broadcast("uxsPermitsChanged")},_parseProvidedPermits(),service}}angular.module("uxs").provider("uxsPermitHandler",[UxsPermitHandler])}(),function(){"use strict";function uxsIf($animate,$interpolate,$parse,uxsAccessHandler){function getAttributeValue(scope,attr){var hasExpression=isExpression(attr),parseFn=$parse,extractedAttr;hasExpression&&(parseFn=$interpolate);try{extractedAttr=parseFn(attr)(scope)}catch(error){extractedAttr=attr}return extractedAttr||attr}function getCommentNode(attrs){return document.createComment(" end uxsIf: "+attrs.uxsIf+" ")}function isAuthorized(scope,attrs){var permits=getAttributeValue(scope,attrs.uxsIf),authType=getAttributeValue(scope,attrs.uxsType);return uxsAccessHandler.isPermitted(permits,authType)}function isExpression(attr){return attr&&attr.search(/{{2}.*}{2}/)!==-1}function link(scope,element,attrs,ctrl,transclude){function checkVisibility(){isAccessible=isAuthorized(scope,attrs),isAccessible?childScope||transclude(function(clone,newScope){childScope=newScope,clone.push(getCommentNode(attrs)),cloneReference=clone,$animate.enter(clone,element.parent(),element)}):(childScope&&(childScope.$destroy(),childScope=null),cloneReference&&($animate.leave(cloneReference),cloneReference=null))}var isAccessible,childScope,cloneReference;checkVisibility(),scope.$on("uxsPermitsChanged",checkVisibility)}return{multiElement:!0,transclude:"element",priority:800,terminal:!0,restrict:"A",link:link}}angular.module("uxs").directive("uxsIf",["$animate","$interpolate","$parse","uxsAccessHandler",uxsIf])}()