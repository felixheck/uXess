(function(){"use strict";angular.module("uxess",["templates"])})(),angular.module("templates",[]).run(["$templateCache",function($templateCache){$templateCache.put("demo.tpl.html","<h1>Demo Partial</h1>"),$templateCache.put("demo2.tpl.html","<h1>Demo Partial</h1>")}]),function(){"use strict";function AccessHandler(ACCESS_TYPES,PermitHandler){function parseAccessType(accessType){var parsedAccessType=data.defaultAccessType;return angular.isString(accessType)&&(parsedAccessType=angular.lowercase(accessType).trim()),parsedAccessType}var data={defaultAccessType:"any"};this.setDefaultAccessType=function setDefaultAccessType(accessType){var isVerified=this.verifyAccessType(accessType),parsedAccessType=parseAccessType(accessType);isVerified&&(data.defaultAccessType=parsedAccessType)},this.getDefaultAccessType=function getDefaultAccessType(){return data.defaultAccessType},this.verifyAccessType=function verifyAccessType(accessType){var parsedAccessType=parseAccessType(accessType),accessTypeKeys=Object.keys(ACCESS_TYPES);return accessTypeKeys.indexOf(parsedAccessType)!==-1},this.isAccessible=function isAccessible(permits,accessType){var isVerified=this.verifyAccessType(accessType),parsedAccessType=parseAccessType(accessType),permitInspector=ACCESS_TYPES[parsedAccessType];return isVerified&&PermitHandler[permitInspector](permits)}}angular.module("uxess").service("AccessHandler",["ACCESS_TYPES","PermitHandler",AccessHandler])}(),function(){"use strict";angular.module("uxess").constant("ACCESS_TYPES",{any:"hasAnyPermits",all:"hasPermits",none:"hasNonePermits"})}(),function(){"use strict";function PermitHandler($rootScope){function inspectPermits(element){return data.permits.indexOf(element)!==-1}function parsePermitList(permits){return permits.map(function(permit){return angular.lowercase(permit).trim()})}var data={permits:[]};this.parsePermits=function parsePermits(permits){var parsedPermits=[];return permits&&angular.isString(permits)&&(permits=permits.split(",")),permits&&angular.isArray(permits)&&(parsedPermits=parsePermitList(permits)),parsedPermits},this.getPermits=function getPermits(){return data.permits},this.setPermits=function setPermits(permits){data.permits=this.parsePermits(permits),$rootScope.$broadcast("uxsPermitsChanged")},this.addPermits=function addPermits(permits){var parsedPermits=this.parsePermits(permits);Array.prototype.push.apply(data.permits,parsedPermits),$rootScope.$broadcast("uxsPermitsChanged")},this.hasPermits=function hasPermits(permits){var parsedPermits=this.parsePermits(permits);return parsedPermits.every(inspectPermits)},this.hasAnyPermits=function hasAnyPermits(permits){var parsedPermits=this.parsePermits(permits);return parsedPermits.some(inspectPermits)},this.hasNonePermits=function hasNonePermits(permits){return!this.hasAnyPermits(permits)}}angular.module("uxess").service("PermitHandler",["$rootScope",PermitHandler])}(),function(){"use strict";function uxsIf($animate,AccessHandler){function link(scope,element,attr,ctrl,transclude){var isAccessible=AccessHandler.isAccessible(attrs.uxsIf,attrs.uxsType);isAccessible?$animate.enter():$animate.leave(),angular.noop(),scope.$on("uxsPermitsChanged",angular.noop)}return{multiElement:!0,transclude:"element",priority:500,terminal:!0,restrict:"A",link:link}}angular.module("uxess").directive("uxsIf",["$animate","AccessHandler",uxsIf])}()